[{"content":"\rJoin the Closed Beta\nThe Beacon SDK is currently in closed Beta. Please complete the form to sign up for the closed beta.\nJoin to get access to the Beacon SDK, the community sheet repo for Beacon sheet, the community sheet developers in discord, and the new sheet developer Roll20 permissions.\nThe Beacon SDK is a Software Development Toolset (SDK) designed to allow web developers create digital TTRPG character sheets for Roll20 using modern web development tools.\nThe Beacon SDK provides a framework to create dynamic, responsive, and fully integrated character sheet for both Roll20 Tabletop and Roll20 Characters.\nWhat is the Beacon SDK? The Beacon SDK gives you tools to easily access character data on Roll20 in your local web environment. This allows you hook up your local host to development sandboxes in Roll20 Tabletop and Roll20 Characters so you develop and test your characters in Roll20 using actual compendium and character data.\nBeacon SDK also gives you more tools to create and manage attributes that define your sheet\u0026rsquo;s data structure. It helps to bypass problematic callback functions, and completely removes the need for sheetworkers from the custom sheet development method.\nKey Features Develop Sheets Your Way: Beacon allows you to use the modern web development frameworks of your choice essentially making digital character sheets out of a web applications. Roll Mechanics: Integrate complex roll formulas and display roll results directly within Roll20 Tabletop or Roll20 Characters. Macros: Create attributes that give players control to make macros for automated actions and roll calculations without giving them too much asses to attributes that could break their character sheet. Event Handling: Utilize a comprehensive set of handlers to manage various events and interactions within Roll20 Tabletop. Legacy Support: Convert and integrate legacy macros and roll templates with the new Beacon architecture. Customization: Define custom actions, computed attibutes, and handle specific roll templates tailored to your game\u0026rsquo;s needs. Getting Started To get started with the Beacon SDK, you must initialize the relay, set up your character sheets, and define the necessary actions, handlers, and computed attributes.\nThis documentation provides detailed guides and examples to help you through each step of the process.\nBy leveraging the Beacon SDK, you can create rich, interactive, fully integrated characters sheet in Roll20 Tabletop and Roll20 Characters that enhance gameplay and streamline game management for players and GMs.\nWhether adapting existing character sheets or building new ones from scratch, the Beacon SDK offers the tools and flexibility to bring your game to life.\n","date":"2024-05-07","id":0,"permalink":"/beacon-docs/docs/gettingstarted/introduction/","summary":"Join the Closed Beta\nThe Beacon SDK is currently in closed Beta. Please complete the form to sign up for the closed beta.","tags":[],"title":"Introduction"},{"content":"\rJoin the Closed Beta\nThe Beacon SDK is currently in closed Beta. Please complete the form to sign up for the closed beta.\nJoin to get access to the Beacon SDK, the community sheet repo for Beacon sheet, the community sheet developers in discord, and the new sheet developer Roll20 permissions.\nThis installation guide is designed for sheet developers with experience in web development, that want to start creating a character sheet from scratch or already have an existing project they wish to add Beacon to.\nTo get started quickly with a boilerplate, you can download and start editing the Quick Start Example Sheet which already has the Beacon SDK installed, along with several recommanded patterns implemented in a Vue.js project.\nPrerequisites Before you can install the Beacon SDK, you\u0026rsquo;ll need to have the following:\nA local web development environment with a code editor. Node.js installed on your machine. If you don\u0026rsquo;t have Node.js installed, use the following steps in the official Node.js documentation. A javascript project, we recommand Vue.js but you can choose whichever you are more comfortable with. These steps use npm but you are free to use any package manager and framework you prefer.\nThe following steps will guide you in installing the Beacon SDK in your application:\nStep 1: Add the package to your project You can find the latest version of the package on the NPM registry.\nIn your project\u0026rsquo;s directory, run the following:\nnpm i @roll20-official/beacon-sdk\rThis will install the Beacon SDK package to your project\u0026rsquo;s package.json file.\nStep 2: Use the Beacon package in your project The Beacon package exports various utilities you can use in your application. The main one that needs to be setup to enable the connection between Beacon SDK and Roll20 is initRelay.\nIdeally you would want to call this when your sheet is initalizing, and it is the function where you will define sheet actions, computed values, and how the sheet will response to or send character data changes. visit the initRelay page for a more detailed breakdown.\nAdd the following to your project:\nimport { initRelay } from \u0026#39;@roll20/beacon-sdk\u0026#39;; const dispatch = initRelay({ handlers: { onInit: ({ character } ) =\u0026gt; { console.log(\u0026#39;sheet character\u0026#39;, character) }, onChange: () =\u0026gt; {}, onSettingsChange: () =\u0026gt; {}, onSharedSettingsChange: () =\u0026gt; {}, onTranslationsRequest: () =\u0026gt; {}, onDragOver: () =\u0026gt; {} }, // Refer to our advanced example sheet on how to setup actions and computed properties. actions: {}, computed: {} })\rinitRelay returns a dispatch function that allows you to call methods or send changes from the sheet to Roll20. Check out the page on dispatch to learn more about the different methods.\nStep 3: Settings up the Roll20 tabletop sandbox On the Roll20 website visit the custom sheet sandbox and create a new sandbox, we\u0026rsquo;ll use this sandbox to develop our sheet but we must set it up to listen to our local project\u0026rsquo;s web server.\nAfter creating a new sandbox, we\u0026rsquo;ll be taken to the sandbox details page, here you will find a collapseable section called Sheet.json Editor, opening this we can add the settings we need to connect to our project:\n{ \u0026#34;advanced\u0026#34;: true, \u0026#34;advancedPort\u0026#34;: 7620 // or the port of your webserver }\rAfter adding these changes make sure to click Save Changes at the bottom of the page. After which you can click Launch Game on the page to go into the game and start testing your sheet.\n","date":"2024-04-07","id":1,"permalink":"/beacon-docs/docs/gettingstarted/installing-beacon/","summary":"Join the Closed Beta\nThe Beacon SDK is currently in closed Beta. Please complete the form to sign up for the closed beta.","tags":[],"title":"Installing Beacon"},{"content":"\rJoin the Closed Beta\nThe Beacon SDK is currently in closed Beta. Please complete the form to sign up for the closed beta.\nJoin to get access to the Beacon SDK, the community sheet repo for Beacon sheet, the community sheet developers in discord, and the new sheet developer Roll20 permissions.\nPrerequisites To set this sheet up properly, make sure that you have the following tools installed:\nVue.js Vite SCSS To download the community quick start sheet, refer to these repositories:\nCommunity Sheet Repo\nQuick Start Sheet\nFigure 1: Quickstart sheet\nUse the following steps to get started:\nInstall the Beacon SDK: Run the following command. npm i @roll20-official/beacon-sdk\rInstall dependencies: Install the dependencies for the project. npm install\rStart the Vite server: After installing the project\u0026rsquo;s dependencies, you\u0026rsquo;ll need to start the Vite server. There are two ways to do this: a. Offline Development: This method will run the Vite server with the default port and environment set to development.\nnpm run dev\rOnce this code executes successfully, you can access the Vite server at http://localhost:5173.\nThis method is useful when you do not have access to the Roll20 website or would like to work on parts of your project that do not depend on a connection to the Roll20 Tabletop or Roll20 Characters, such as working on styling, mocking up the environment, building Vue components, testing functionality, etc.\nIn development mode, you cannot save or access existing character data or use the Beacon SDK functions that depend on Roll20 Tabletop or Roll20 Characters functionality, such as dice rolling and token manipulation.\nb. Sandbox Development: This method will run the Vite server with the port set to 7620 and the environment set to staging mode.\nnpm run sandbox\rThis command will build the SCSS files and then run the Vite server. This will set the server up for connecting to a Roll20 Tabletop custom sheet sandbox as well as through the sandbox in Roll20 Characters.\nTo test your changes in the Roll20 Tabletop custom sheet sandbox, you will need to add the following to the sheet.json editor in the game settings:\n{ \u0026#34;advanced\u0026#34;: true, \u0026#34;advancedPort\u0026#34;: 7620 }\rUseful Commands The following set of commands can come in handy when working with this sheet:\nFor Hot reloading and building CSS files, use the following command: npm run watch-scss\rFor linting, use the following command: npm run lint\rFor formatting with Prettier, use the following command: npm run format\r","date":"2024-04-07","id":2,"permalink":"/beacon-docs/docs/gettingstarted/quick-start-sheet-template/","summary":"Join the Closed Beta\nThe Beacon SDK is currently in closed Beta. Please complete the form to sign up for the closed beta.","tags":[],"title":"Quick Start Sheet Template"},{"content":"\rJoin the Closed Beta\nThe Beacon SDK is currently in closed Beta. Please complete the form to sign up for the closed beta.\nJoin to get access to the Beacon SDK, the community sheet repo for Beacon sheet, the community sheet developers in discord, and the new sheet developer Roll20 permissions.\nPrerequisites To set this sheet up properly, make sure that you have the following:\nVue framework \u0026amp; Routing Multiple Data Stores Complex Roll Templates Rich Sheet Actions TypeScript Vite SCSS Ability to run Unit \u0026amp; End-to-End Tests To download the community quick start sheet, refer to these repositories:\nCommunity Sheet Repo\nQuick Start Sheet\nFigure 1: Advanced sheet\nThis sheet uses the same steps listed in the . Immediately after implementing those three steps, you\u0026rsquo;ll add the following step:\nRun a CI check: This will run several checks to ensure your code is as optimal as possible, including formatting, linting, type checking, unit tests, and end-to-end tests. npm run ci-check\rYou can think of this command as a sanity check you can leverage when pushing a big release for your sheet!\nUseful Commands The following set of commands can come in handy when working with this sheet:\nFor Hot reloading and building CSS files, use the following command: npm run watch-scss\rFor linting, use the following command: npm run lint\rFor formatting with Prettier, use the following command: npm run format\rFor type checking with TypeScript, use the following command: npm run type-check\rFor running unit tests with Vitest, use the following command: npm run test:unit\rTo open up and develop local end-to-end tests with Cypress, use the following command: npm run test:e2e:open:local\rFor running local end-to-end tests with Cypress, use the following command: npm run test:e2e:local\rTo run CDN-hosted end-to-end tests with Cypress, use the following command: npm run test:e2e\r","date":"2024-03-07","id":3,"permalink":"/beacon-docs/docs/gettingstarted/example-patterns-sheet/","summary":"Join the Closed Beta\nThe Beacon SDK is currently in closed Beta. Please complete the form to sign up for the closed beta.","tags":[],"title":"Example Patterns Sheet"},{"content":"\rJoin the Closed Beta\nThe Beacon SDK is currently in closed Beta. Please complete the form to sign up for the closed beta.\nJoin to get access to the Beacon SDK, the community sheet repo for Beacon sheet, the community sheet developers in discord, and the new sheet developer Roll20 permissions.\nThere are two ways you can publish a Beacon sheet.\nYou can publish a testing verison of the sheet privately and give specific Roll20 users access to it on Roll20 Characters and Roll20 Tabletop, or You can submit a request to publish your sheet publicly for all users on Roll20 Characters and Roll20 Tabletop to have access. When publishing a sheet, you will need to includes all the necessary code, assets, and metadata packaged together to be easily deployed and tested on the Roll20 platform. When a sheet is published, either publicly or privately for testing purposes, the sheet will run on Roll20 and will no longer require a local development environment to use it.\nWho can release a sheet? We allow anyone to create and release a sheet on Roll20 provided the sheet meets our code of conduct, does not infringe on our intellectual property or the intellectual property of our partners, and does not violate copyright laws. Before submitting a sheet to be released either as a test sheet in private or a publicly released sheet, please ensure that atleast one of these conditions are met.\nI have authorization from the game\u0026rsquo;s publisher to make this an official sheet on Roll20 with their name attached. This sheet is for an unofficial fan game and it does not contain any copyright material. This sheet is a modification to an existing game with an open license that allows me to make a sheet for the game. This sheet is a homebrew game system that I created myself. Releasing a Test Sheet The following steps will aid you while releasing your sheet. These steps assume this is your first time releasing your sheet for testing, but you will likely multiple times. Each time, follow these steps, making sure that everything is up-to-date with each release.\nStep 1: Create a build command. You must have a build command that will produce the minified production-ready code for the sheet. The build command must be able to create these exact files:\r- `sheet.js`\r- `sheet.css`\r- `host.css` (optional) - _Used for sheet rolls made to chat (roll templates)._\r- an Image Folder (optional) - _Used to contain fonts and images used in the sheet._\rWe will use this build command to get these sheet files to use for your sheet. Make sure to test these files locally first before moving to Step 3.\rBuild commands will vary depending on the build tools you use. This can vary from framework to framework. For the quickstart and example sheet, we use [Vite](https://vitejs.dev/). Here is a [video](https://www.youtube.com/watch?v=VAeRhmpcWEQ) that can help you get started.\rStep 2: Add a sheet.json file to your project. The `sheet.json` file holds the metadata about your sheet. We use this information to display the sheet modal in Roll20 Characters and we should it to the user when they are creating a game on Roll20 Tabletop.\rAdd a `sheet.json` file to your sheet folder. Each time you release your sheet, make sure this information is up-to-date.\r```\r{\r\u0026quot;advanced\u0026quot;: true,\r\u0026quot;authors\u0026quot;: \u0026quot;CSC\u0026quot;,\r\u0026quot;roll20userid\u0026quot;: \u0026quot;\u0026quot;,\r\u0026quot;preview\u0026quot;: \u0026quot;\u0026quot;,\r\u0026quot;compendium\u0026quot;: \u0026quot;\u0026quot;,\r\u0026quot;useroptions\u0026quot;: [],\r\u0026quot;instructions\u0026quot;: \u0026quot;Example Beacon Community Sheet\u0026quot;,\r\u0026quot;legacy\u0026quot;: false,\r\u0026quot;tags\u0026quot;: \u0026quot;\u0026quot;\r}\r```\rThis example comes from the `sheet.json` for the [Quickstart sheet](https://github.com/Roll20/roll20-beacon-sheets/blob/main/sheets/quickstart-example-sheet/sheet.json).\rUse this table to better understand your options as you setup your own `sheet.json` file.\rKey Format and Options Description Required? advanced true This indicated the type of sheet this is. true is required for Beacon Sheets. Leave this one as true. Yes legacy false This indicated the type of CSS sanitization you would like to use. false is required for Beacon Sheets. Leave this one as false. Yes authors \u0026quot;Author name,author name\u0026quot; Add the name of each Author in a comma separated list. Yes roll20userid \u0026quot;[userID],[userID]\u0026quot; Add the user ID (found in the address bar when you view your profile) of each Roll20 account for the contributors on this sheet. This will give each user a \u0026ldquo;Sheet Author\u0026rdquo; badge on their Roll20 Profile. This does not have to be the same account used to develop the sheet No preview URL or filename Accepts the URL or relative path of an image used to show off the sheet. This should be a screenshot of your sheet. Yes instructions \u0026quot;text\u0026quot; Text used in Roll20 Characters to describe the sheet. You can put information for your users here. If you have nothing to say, make sure the field is in the sheet.json but it is blank. Yes compendium \u0026quot;compendium_shortname\u0026quot; Add the compendium shortname for the compendium that you want to use for your sheet. No requestedSize widthxheight Put a default value used to open the character sheet in Roll20 Tabletop. If you leave it out, Roll20 Tabletop will use the default size. No useroptions an array of options This is an array of options from the Default Sheet Settings. No tags \u0026quot;Free Basic Rules,Auto-Calculations,Automated Dice,Mobile-Friendly,Alpha,Ready To Play Characters\u0026quot; These tags are used in Roll20 Character to indicate to the user the features that are available on this sheet. Adding a tag here does not activate the feature itself. No printable true or false Add if the sheet have been updated to be print-friendly. This will activate the print button on the character sheet. No patreon URL Place the URL for a Patreon campaign here, and it will appear under your sheet\u0026rsquo;s description. No tipee URL Place the URL for a Tipeee here, and it will appear under your sheet\u0026rsquo;s description No You can find more information about the sheet.json used for custom sheets on the [Roll20 Wiki](https://github.com/Roll20/roll20-beacon-sheets/blob/main/sheets/quickstart-example-sheet/package.json). Step 3: Create a pull request in the Beacon Community Sheet repo. In the [Beacon Community Sheet Repo](https://github.com/Roll20/roll20-beacon-sheets/tree/main), create a pull request that must include the [submission checklist](https://github.com/Roll20/roll20-beacon-sheets/blob/main/.github/PULL_REQUEST_TEMPLATE.md) listed for reference below.\rThe name of the pull request should... - [ ] Contain the **short name** of the sheet being submitted, and\r- [ ] State the **type of change** being submitted (New/Update/Bugfix/etc.).\r_Pull Request Title Example: Sheet/\u0026lt;TYPE_OF_CHANGE\u0026gt;/\u0026lt;SHEET_SHORT_NAME\u0026gt;_\rIf this is the first time you are submitting this sheet to the repository, please make sure to have the following information ready.\r- The full name of the game associated with the sheet (i.e. Dungeons \u0026amp; Dragons 5th Edition, The Dresden Files RPG).\r- The name of the game system/family associated with the sheet (i.e. Dungeons \u0026amp; Dragons, FATE).\r- The publisher of the game associated with the sheet (i.e. Wizards of the Coast, Evil Hat).\r- The a URL address of where the game rules can be purchased/downloaded/found.\rThe information that is provided here will be used to help users find the sheet in Roll20 Tabletop and Roll20 Characters. Please make sure that all names that you provide read exactly how you'd like them to be displayed. To see an example of how this information will show up, create a new game on Roll20. The name and the publisher will show up in the dropdown menu and as the title of the sheet that is selected.\rPull requests that contain changes to files outside the sheet sub-folder on which you\u0026rsquo;re working will be rejected.\nStep 4: Give specific Roll20 users access. Before your testing sheet is finally approved, you want choose to give specific Roll20 Users access to the testing sheet. This will allow only those users to see the sheet in Roll20 Tabletop and Roll20 Characters. These users will be able to use it just like the final users will when the sheet is public. You can give access to friends, group members, or even clients and publishers you're working with.\rTo give access to one ore more specific user's, fill out the [Beacon Sheet Access Form](https://docs.google.com/forms/d/e/1FAIpQLSdaVl_RSMdZ5Rv_Q1gIK2wtNIHd6CibhOZGdQWo833k-z9Jdg/viewform?usp=sf_link). You will need the email associated with the Roll20 Account that will have access to the sheet for each person you'd like to give access.\rWe can always grant more people access to the sheet after it is released. Resubmit the Beacon Sheet Access Form to the new people for which you\u0026rsquo;d like to give access.\nStep 5: Wait for approval and access. After you create a pull request, our team will approve it and add your sheet to the sheet selection in Roll20 Tabletop and Roll20 Characters. We will then give only your Roll20 user and any others you've listed in the pull request comments access to the sheet in Roll20. This sheet will then be available for you and others with access to test it.\rSubmission Checklist The pull request title contains the short name of the sheet being submitted. The pull request title states the type of change being submitted (New/Update/Bugfix/etc.). There is a build command for the sheet. I have updated the sheet.json file. This sheet meets Roll20\u0026rsquo;s Code of Conduct. This sheet does not violate the intellectual property of Roll20 or their partners. This sheet does not violate copyright laws. Releasing a Final Version After you have released a test version of your sheet, you can follow the same steps as [releasing a test version](#Releasing a Test Sheet) to make your sheet available to everyone. This time, make sure to check the box for \u0026ldquo;For Public Release\u0026rdquo; in the pull request instead of updating the user access list.\nOnce you have created the pull request, our team will review the sheet functionality, code, and metadata for consistency, best practices, and overall system security. We will also follow up with any publishing partners to confirm the release of a sheet using their game system. We reserve the right to reject any sheet that does not meet our code of conduct or conflicts with our partnerships.\n","date":"2024-02-07","id":4,"permalink":"/beacon-docs/docs/gettingstarted/releasing-a-sheet/","summary":"Join the Closed Beta\nThe Beacon SDK is currently in closed Beta. Please complete the form to sign up for the closed beta.","tags":[],"title":"Releasing a Sheet"},{"content":"Well-thought-through product announcements will help increase feature awareness and engage users with new functionality. Just like sharing your public roadmap, it\u0026rsquo;s also a great way to let potential customers see that you\u0026rsquo;re constantly improving.\nFurther reading Read How to announce product updates and features ","date":"2023-09-07","id":5,"permalink":"/beacon-docs/blog/example-post/","summary":"You can use blog posts for announcing product updates and features.","tags":[],"title":"Example Post"},{"content":"","date":"2023-09-07","id":6,"permalink":"/beacon-docs/blog/","summary":"","tags":[],"title":"Blog"},{"content":"\rJoin the Closed Beta\nThe Beacon SDK is currently in closed Beta. Please complete the form to sign up for the closed beta.\nJoin to get access to the Beacon SDK, the community sheet repo for Beacon sheet, the community sheet developers in discord, and the new sheet developer Roll20 permissions.\nThe Beacon SDK is composed of various methods and components that allow developers to create dynamic and interactive character sheets for virtual tabletop (VTT) games. initRelay is the main method that initializes the Beacon SDK communication channel with the host (Either the Roll20 tabletop or in Roll20 Characters). It should be initialized as soon as the sheet loads, as its onInit handler will be the earliest we can get access to that character\u0026rsquo;s data.\ninitRelay({ handlers: { onInit, onChange, onSettingsChange, onSharedSettingsChange, onTranslationsRequest, onDragOver, onDropOver, }, actions: {}, computed: {}, convertLegacyMacroAttributes, handleLegacyRollTemplates }): Promise\u0026lt;Dispatch\u0026gt;\rThese components are crucial for handling actions, computations, macros, and rolls. This overview provides a high-level summary of each section, helping you understand their roles and how they integrate within the SDK.\nActions\rActions define specific operations that can be performed by characters within the Roll20 Tabletop. These operations can range from simple tasks like rolling a dice to more complex interactions such as casting spells or activating abilities.\nHandlers\rHandlers are event listeners that manage communication between the Roll20 Tabletop and the character sheet. They respond to various events, such as changes in character attributes or settings, and trigger appropriate actions or updates.\nComputed\rComputed properties are dynamic values derived from other character attributes. They allow for the creation of complex, calculated attributes that automatically update when their dependencies change.\nMacro Attributes\rMacro attributes handle the conversion of legacy macro attributes to the new format used in the Beacon SDK. This ensures compatibility with older character sheets and macros, allowing for a smooth transition to the new system.\nRolls\rThe Rolls component allows for advanced dice-rolling mechanics within the Roll20 Tabletop. It supports both simple and complex rolls, providing flexibility in how roll results are displayed and computed.\nDispatch\rThe dispatch object provides methods for sending commands from the character sheet back to the host. Except when specified every method returns a promise.\n","date":"2024-06-07","id":7,"permalink":"/beacon-docs/docs/components/initrelay/","summary":"Join the Closed Beta\nThe Beacon SDK is currently in closed Beta. Please complete the form to sign up for the closed beta.","tags":[],"title":"InitRelay"},{"content":"\rJoin the Closed Beta\nThe Beacon SDK is currently in closed Beta. Please complete the form to sign up for the closed beta.\nJoin to get access to the Beacon SDK, the community sheet repo for Beacon sheet, the community sheet developers in discord, and the new sheet developer Roll20 permissions.\ninitRelay({ //...other methods actions: {}, }): Promise\u0026lt;Dispatch\u0026gt;\rActions are a collection of methods that can be executed from the Roll20 Tabletop or Roll20 Characters. These actions are used for any rolls that may need to be triggered outside of the sheet itself, such as from a macro or a chat button. Generally, most or all of a sheet’s rolls should be defined as actions.\nactions: { [name: string]: { method: (props: { dispatch: Dispatch, character: Character, messageId?: string, rolls?: RollResults }, ...args: string[]): void | Promise\u0026lt;void\u0026gt; } }\rActions are passed into the initRelay function in an object, where the keys are the unique names of the actions, and the values are objects containing a method property (additional metadata fields may be added to this object in the future).\nThe action\u0026rsquo;s method receives a props object from the host containing the following properties:\ndispatch: A Dispatch object. character: The data of the character performing the action. Currently, the action will not receive the character’s bio or GM notes, regardless of whether the player has access to those fields. messageId (optional): A unique ID for an existing chat message. It\u0026rsquo;s included in actions triggered from chat buttons to provide context for the original roll. rolls (optional): Included when action is triggered from a chat button. Contains the roll results of the original roll. These methods can also receive an unlimited number of additional arguments. This is because these actions can be triggered by plain text via a macro. However, all additional arguments must be strings. Additionally, these methods can be synchronous or asynchronous and do not return a value.\n","date":"2024-05-07","id":8,"permalink":"/beacon-docs/docs/components/actions/","summary":"Join the Closed Beta\nThe Beacon SDK is currently in closed Beta. Please complete the form to sign up for the closed beta.","tags":[],"title":"Actions"},{"content":"\rJoin the Closed Beta\nThe Beacon SDK is currently in closed Beta. Please complete the form to sign up for the closed beta.\nJoin to get access to the Beacon SDK, the community sheet repo for Beacon sheet, the community sheet developers in discord, and the new sheet developer Roll20 permissions.\nSheet authors define computed properties that are accessed by the Roll20 Tabletop or Roll20 Characters. These computed properties can be used as attributes in macros and are available to assign as values to token bars - if the tokenBarValue property is set to true.\ninitRelay({ //...other methods computed: { [name: string]: { tokenBarValue?: boolean description?: string get: ( props: { character: Character }, ...args: string[] ) =\u0026gt; string | number | JSONValue set?: ( props: { character: Character dispatch: Dispatch }, ...args: string[] ) =\u0026gt; void | Promise\u0026lt;void\u0026gt; } }, }): Promise\u0026lt;Dispatch\u0026gt;\rComputed properties are passed into the initRelay function in an object where the keys are the names of the properties, and the value should be an object containing the following:\nget (required): It receives character data along with any number of string parameters and should return the computed value. tokenBarValue (optional): A boolean indicating whether this property should be available for use in token bars. description (optional): A text value indicating what this computed summary property represents. set (optional): This method receives character data and a dispatch, along with string arguments. This method does not need to return a value. Setting tokenBarValue to true will make the property available to use as a value for token bars. To work correctly, the get function must not rely on any additional arguments and must return either a simple value (a string or number) or an object: { current: number | string, max: number | string }\rIf the set function is omitted, the value will not be editable from the token itself. If defined, set methods will receive one string argument, which is whatever the user types into the input for modifying the bar. ","date":"2024-04-07","id":9,"permalink":"/beacon-docs/docs/components/computed/","summary":"Join the Closed Beta\nThe Beacon SDK is currently in closed Beta. Please complete the form to sign up for the closed beta.","tags":[],"title":"Computed"},{"content":"\rJoin the Closed Beta\nThe Beacon SDK is currently in closed Beta. Please complete the form to sign up for the closed beta.\nJoin to get access to the Beacon SDK, the community sheet repo for Beacon sheet, the community sheet developers in discord, and the new sheet developer Roll20 permissions.\nHandler methods allow the sheet to respond to data passed from the Roll20 Tabletop or Roll20 Characters (both refered to as host throughout this page) to the sheet. It is the main agrument that must be passed into initRelay or the sheet will never fully load.\ninitRelay({ handlers: { onInit, onChange, onSettingsChange, onSharedSettingsChange, onTranslationsRequest, onDragOver, // optional onDropOver, // optional } //...other methods }): Promise\u0026lt;Dispatch\u0026gt;\ronInit The onInit method receives the initial data from the host.\nThis will be the first time we have access to character data, sheet settings, as well as compendium data if this character is made as a result of a compendium drag and drop on the host.\nonInit(event: { character: Character, // Initial Data of the primary character for this sheet. settings: { // Campaign and character specific settings colorTheme: string, // \u0026#39;dark\u0026#39; or \u0026#39;light\u0026#39; language: string, // two-letter language code, i.e. \u0026#39;en\u0026#39; gm: boolean, // whether or not the current player has gm permissions owned: boolean, // whether or not the current player controls the primary character settingsSheet: boolean, // whether or not this sheet is the settings sheet headless: boolean, // whether or not it should be displayed, set by the host sandbox: boolean, campaignId: number, // The id of the current campaign environment: string, // VTT, CHARACTERS, DISCORD currentUserId: string, // user id of user opening the sheet singleSheet: boolean }, sharedSettings: {}, // Data shared between all characters in this campaign compendiumDropData: { // Populated when the character sheet is created from a compendium entry such as a creature or NPC. pageName: string, categoryName: string, expansion: number, }, }, dispatch: Dispatch): void;\rThis function may be called multiple times during development in the sheet sandbox as part of hot reloads.\nonChange onChange is called whenever a character’s data is changed on the host’s end. The event object contains a partial character with only the character’s ID and the changed data. This could be the character’s bio, GM notes, or attributes (only the changed attributes).\nonChange(e: { character: Partial\u0026lt;Character\u0026gt; }, dispatch: Dispatch): void;\ronSettingsChange onSettingsChange is called when either the host’s color theme is changed, or when the current player’s ownership of the primary character changes.\nonSettingsChange(e: { colorTheme: string, owned: boolean }, dispatch: Dispatch): void;\ronSharedSettingsChange onSharedSettingsChange is called when someone changes a shared setting in the host.\nonSharedSettingsChange({ settings: { [key: string]: any } }): void;\ronTranslationsRequest onTranslationsRequest is called before the relay is fully initialized and returns the translation JSON data corresponding to the two-letter language argument.\nonTranslationsRequest(language: string): { [key: string]: string };\ronDragOver (optional) onDragOver is called when a compendium item from the compendium tab is dragged over the iframe window containing the character sheet.\nCoordinates of the drag are provided via top and left values, and basic compendium data is passed so that a subsequent compendium request can be made via the provided dispatch. If the item is moved outside of the iframe, dragData and coordinates are null.\nonDragOver(e: { coordinates: { top: number, left: number }, dragData: { pageName: string categoryName: string expansionId: number } | null, }, dispatch: Dispatch) =\u0026gt; void\ronDropOver (optional) onDropOver is called when a compendium item from the compendium tab is dropped over the iframe window containing the character sheet.\nCoordinates of the drop are provided via top and left values, and basic compendium data is passed so that a subsequent compendium request can be made via the provided dispatch.\nonDropOver(e: { coordinates: { top: number, left: number }, dropData: { pageName: string categoryName: string expansionId: number } }, dispatch: Dispatch) =\u0026gt; void\r","date":"2024-03-07","id":10,"permalink":"/beacon-docs/docs/components/handlers/","summary":"Join the Closed Beta\nThe Beacon SDK is currently in closed Beta. Please complete the form to sign up for the closed beta.","tags":[],"title":"Handlers"},{"content":"\rJoin the Closed Beta\nThe Beacon SDK is currently in closed Beta. Please complete the form to sign up for the closed beta.\nJoin to get access to the Beacon SDK, the community sheet repo for Beacon sheet, the community sheet developers in discord, and the new sheet developer Roll20 permissions.\nThe Roll20 Tabletop and Roll20 Characters (both refered to as host throughout the rest of this page) have several new features that enhance the way rolls are handled and displayed. These features include attributes and elements that allow for dynamic roll results and interactivity within the host. Vist the Roll20 help center to learn more about Roll20\u0026rsquo;s Dice Rolling system\nThe most command way to trigger a dice roll is through the dispatch object returned from the initRelay, but it could also be called from actions:\ndispatch.roll({ rolls: { [rollName: string]: string } // Ex. {attack: \u0026#39;1d20+4\u0026#39;, damage: `3d6+2`} messageId?: string }): Promise\u0026lt;{messageId: string, results: RollResults }\u0026gt;\rThe roll method takes one or more rolls in the form of an object, where the keys are unique roll names and the values are roll strings.\nmessageId can be provided to attach the roll to an existing chat message, either overriding it or appending to it in the chat log. If messageId is omitted, the roll will be associated with a new chat message and a new messageId for that message will be returned with the roll results. The method returns a promise that resolves with an object containing the messageId and the RollResults. The roll result is returned in the same format as in the non-beacon dice rolls computed roll system.\nThe dispatch roll method and the actions roll section do not post to the chat, instead they will return a promise which will resolve to the roll results and the message id.\nPosting A Roll to the Chat The roll method does not send or post any data to the chat on it\u0026rsquo;s own. We instead have to use dispatch\u0026rsquo;s post method to send our roll results along with any other content to the chat.\ndispatch.post({ characterId: \u0026#39;-O0KZhMTxLkn2HArFj8f\u0026#39;, content: `I rolled a ${diceRoll.results.attack.results.result} to hit and did ${diceRoll.results.damage.results.result} damage!`, })\rAdditional Roll Posting Options data-rollname The data-rollname attribute tells the host that this HTML element is displaying the result of a roll.\n\u0026lt;span data-rollname=\u0026#34;attack\u0026#34;\u0026gt;\u0026lt;/span\u0026gt;\rThe host will both add the Quantum Roll signature element and replace the contents of the element with the result from the roll.\nThis is the preferred method for displaying roll results wherever possible, that is, sending the whole roll formula to the roll server and allowing the host to display the result.\ndata-computed Tagging an element with both a data-rollname and a data-computed=\u0026quot;true\u0026quot; tells the host that this element is associated with a roll, but the results of that roll were computed by the author, as opposed to the roll server computing the result.\n\u0026lt;span data-rollname=\u0026#34;complex\u0026#34; data-computed=\u0026#34;true\u0026#34;\u0026gt;25\u0026lt;/span\u0026gt;\rThe host will add the Quantum Roll signature tooltip, but the content of the element will not be modified. Generally, this should only be used when the roll server does not support a particular dice mechanic.\nRoll Buttons Roll buttons are interactive elements that trigger sheet actions, such as damage rolls, when clicked. These buttons use the data-sheet-action attribute to specify the action to be executed.\n\u0026lt;button data-sheet-action=\u0026#34;damage\u0026#34; data-args=\u0026#34;arg1:arg2\u0026#34;\u0026gt;Click Me\u0026lt;/button\u0026gt;\rAdditional arguments can be provided using the data-args attribute, and the character, messageId, and original rolls will be included automatically.\nRolls Results Format type RollResults = { [name: string]: { expression: string //The original expression (i.e. 1d20+3d6) rollName: string //The name of the roll results: { //The results of the roll(s) expression: string dice?: number[] // result: number //The final result of the roll rolls?: { //Detailed results of each part of the roll (i.e. 3d6) sides: number //The type of die for this part of the roll (i.e. 6) dice: number //The number of dice (i.e. 3) results: number[] //The result of each die (i.e. [4, 2, 5]) }[] } } }\r","date":"2024-01-07","id":11,"permalink":"/beacon-docs/docs/components/rolls/","summary":"Join the Closed Beta\nThe Beacon SDK is currently in closed Beta. Please complete the form to sign up for the closed beta.","tags":[],"title":"Rolls"},{"content":"\rJoin the Closed Beta\nThe Beacon SDK is currently in closed Beta. Please complete the form to sign up for the closed beta.\nJoin to get access to the Beacon SDK, the community sheet repo for Beacon sheet, the community sheet developers in discord, and the new sheet developer Roll20 permissions.\nThe dispatch is returned by the initRelay and provides methods for sending commands from the character sheet back to the host. Except when specified every method below will return a promise.\nupdate dispatch.update({ options: { overwrite?: boolean } character: Partial\u0026lt;Character\u0026gt; }): Promise\u0026lt;void\u0026gt;\rThe update method sends character changes to the host (Roll20 Tabletop or Roll20 Characters) to be persisted.\nThe partial character passed in here must contain the character\u0026rsquo;s id, and can contain any combination of the attributes, bio, and gmNotes properties. When updating a character’s attributes, only include those attributes that have changed.\nupdateCharacter dispatch.updateCharacter({ character: Partial\u0026lt;Character\u0026gt; }): Promise\u0026lt;void\u0026gt;\rLike the update method, updateCharacter sends character changes to the host page (Roll20 Tabletop or Roll20 Characters) to be persisted.\nHowever, this method takes a full set of character attributes as the character argument, and automatically computes the diff with existing character attributes, so that only changed attributes are sent to the data store.\nroll dispatch.roll({ rolls: { [rollName: string]: string } // Ex. {attack: \u0026#39;1d20+4\u0026#39;, damage: `3d6+2`} messageId?: string }): Promise\u0026lt;{messageId: string, results: RollResults }\u0026gt;\rThe roll method takes one or more rolls in the form of an object, where the keys are unique roll names and the values are roll strings. messageId can be provided to attach the roll to an existing chat message, either overriding it or appending to it in the chat log.\nIf messageId is omitted, the roll will be associated with a new chat message and a new messageId for that message will be returned with the roll results.\nThe method returns a promise that resolves with an object containing the messageId and the RollResult (see Types). The roll result is returned in the same format as in the non-beacon dice rolls computed roll system.\npost dispatch.post({ characterId: string, messageId?: string, content: string, options?: { whisper?: \u0026#39;gm\u0026#39;, secret?: boolean, } }): Promise\u0026lt;string\u0026gt;\rpost posts a message to chat, either creating a new message or overwriting an existing one. It requires a character id and message content, a string containing either plain text or HTML to be posted.\nThe method also accepts an options object. Currently, only whisper and secret are supported, the only valid value for whisper is gm, which will send the message as a whisper to the gm.\nThe secret option is ignored unless whisper is also set, toggling to true will cause the message to not be visible to the controlling player.\nLike roll, messageId can be provided to update an existing chat message, but if omitted the method will generate a new messageId and post a new chat message. The method returns the messageId.\nquery dispatch.query(options: Swal2Options): { isConfirmed: boolean, isDenied: boolean, isDismissed: boolean, value?: string | number, dismiss?: \u0026#34;cancel\u0026#34; | \u0026#34;backdrop\u0026#34; | \u0026#34;close\u0026#34; | \u0026#34;esc\u0026#34; | \u0026#34;timer\u0026#34;, errors?: string[], }: Promise\u0026lt;{ results: { isConfirmed: boolean isDenied: boolean isDismissed: boolean value: string | number dismiss: string }, errors: [string] }\u0026gt;\rThe query method takes an options object and uses them to display a SweetAlert2 prompt to the user. It returns the results of the query as a SweetAlertResult, along with any errors encountered. The options work exactly as described in the documentation for SweetAlert2, however not all options are allowed. Here is a list of the allowed options:\ntitleText, text, iconColor, input, width, padding, background, position, grow, timer, timerProgressBar, showConfirmButton, showDenyButton, showCancelButton, ariaLabel, confirmButtonText, denyButtonText, cancelButtonText, confirmButtonAriaLabel, confirmButtonColor, cancelButtonAriaLabel, cancelButtonColor, denyButtonAriaLabel, denyButtonColor, reverseButtons, showCloseButton, closeButtonAriaLabel, returnInputValueOnDeny, imageUrl, imageWidth, imageHeight, imageAlt, inputLabel, inputPlaceholder, inputValue, inputOptions, inputPlaceholder, inputAutoTrim, inputAttributes, validationMessage, progressSteps, currentProgressStep, progressStepsDistance.\nPerform dispatch.perform({ characterId: string, action: string, args: string[], }): Promise\u0026lt;void\u0026gt;;\rperform executes the specified action on behalf of the character (designated by the character id), passing in args to the action method. This method can perform actions on behalf of any character, even a character that the sheet does not have data for.\ngetComputed dispatch.getComputed({ characterId: string, property: string, args: string[] }): Promise\u0026lt;string | number | object\u0026gt;\rsee setComputed below\nsetComputed dispatch.setComputed({ characterId: string, property: string, args: string[] }): Promise\u0026lt;string | number | object\u0026gt;\rgetComputed and setComputed are both nearly identical in how they are called, taking a character id and a property with the name of the computed property you wish to get or set, and an array of string args. Both methods return a promise that resolves with the computed value.\ncompendiumRequest dispatch.compendiumRequest({ query: string }): Promise\u0026lt;{ data: Object errors: Array\u0026lt;Error\u0026gt; extensions: Record\u0026lt;string, any\u0026gt; }\u0026gt;\rcompendiumRequest executes an AJAX request to the compendium service’s graphQL endpoint. It takes in a graphQL query string written according to the Compendium service’s schema. The query string does not need to include the ruleSystem shortName as this is set automatically according to the campaign override or sheet.json value in the Roll20 Tabletop.\ndebouncedCompendiumRequest dispatch.debouncedCompendiumRequest({ query: string }): Promise\u0026lt;{ data: Object }\u0026gt;\rLike compendiumRequest, except that calls to this method are automatically debounced (at 100ms) and grouped together into a single request to the compendium service. Note that this method will only return the requested data, it does not return errors or extensions.\ngetTokens dispatch.getTokens({ characterId: string }): Promise\u0026lt;{ selected: Token[], tokens: Token[] }\u0026gt;: Promise\u0026lt;{ selected: Token[] tokens: Token[] }\u0026gt;\rgetTokens requires a character id string and returns information about tokens on the user’s current page. The return value contains two arrays of tokens. The tokens array contains all tokens on the current page that represent the character whose id was provided to the method. The selected array contains any tokens that are currently selected, regardless of which character they represent. The returned token objects contain all of the token attributes available to the API, you can find documentation here and here.\naddToTracker dispatch.addToTracker({ tokenId?: string, custom?: { name: string img?: string } formula?: string value: string | number }): Promise\u0026lt;void\u0026gt;\raddToTracker adds or updates a single item in the turn tracker. Passing in a tokenId will add the specified token to the tracker, while passing in custom with a name and an optional image url (img) will add a custom item, not connected to any character or token. A round calculation string can be added via the optional formula parameter. value is the initiative number for the item.\naddActionsToHost dispatch.addActionsToHost({ sheetAction?: { characterId: string action: string args?: string[] } action?: string locations?: [\u0026#39;macroBar\u0026#39;] | [\u0026#39;tokenActionBar\u0026#39;] | [\u0026#39;macroBar\u0026#39;, \u0026#39;tokenActionBar\u0026#39;] actionId?: string name: string requestId?: string }): void\raddActionsToHost adds a specific action(macro) to an area of the Roll20 Tabletop UI; either the macrobar or the token action bar. Either sheetAction or action can be passed in but not both at the same time. The sheetAction arg should be passed in when an the action is to designated to a character. While the action arg should be passed in when the action is more generic.\ngetActions dispatch.getActions({ args: { characterId?: string } }): Promise\u0026lt;{ actions?: {} | { [id: string]: ActionFromHost } }\u0026gt;\rgetActions gets a specific character’s actions(macro).\nsetContainerSize dispatch.setContainerSize({ args: { width?: number height?: number } }): Promise\u0026lt;void\u0026gt;\rsetContainerSize updates the size of the container which holds the sheet shared settings. Returns a promise that can be awaited. This can be used in conjunction with something like the ResizeSensor event listener from npm: css-element-queries to automatically resize the container on the host.\nupdateTokensByCharacter dispatch.updateTokensByCharacter({ args: { characterId: string token: Partial\u0026lt;Token\u0026gt; } }): Promise\u0026lt;void\u0026gt;\rupdateTokensByCharacter updates a particular character’s default token as well as all existing tokens representing that character. Returns a promise that can be awaited.\nupdateTokensByIds dispatch.updateTokensByIds({ args: { tokenIds: array of ids as strings token: Partial\u0026lt;Token\u0026gt; } }): Promise\u0026lt;void\u0026gt;\rupdateTokensByIds updates a single or several tokens. Returns a promise that can be awaited.\nautoLinkText dispatch.autoLinkText({ args: { text: string } }): Promise\u0026lt;string\u0026gt;\rautoLinkText goes through the text to find handout names between square brackets and converts them into links with the handoutID. For example in a game with a handout named Dragon, passing in the text string of this is a [Dragon] to autoLinkText returns something similar to this is a \u0026lt;a href=\u0026quot;https://journal.roll20.net/8je02j0kd02k\u0026quot;\u0026gt;Dragon\u0026lt;/a\u0026gt;.\nopenDialogFromLink dispatch.openDialogFromLink({ args: { urlString: string } }): void\ropenDialogFromLink opens the supplied urlString through the Roll20 Tabletop.\nIf the url is for a handout, it will open the corresponding handout in the campaign. This will also check if the user opening the link has access to the handout. If the url is for a compendium, it will open a pop up to the compendium page, it will also check to ensure the user has access to view the page. If the url is for an external page, a confirmation pop up will display to warn the user that the link is for an external site and open a new tab in their main window if confirmed. ","date":"2023-09-07","id":12,"permalink":"/beacon-docs/docs/components/dispatch/","summary":"Join the Closed Beta\nThe Beacon SDK is currently in closed Beta. Please complete the form to sign up for the closed beta.","tags":[],"title":"Dispatch"},{"content":"\rJoin the Closed Beta\nThe Beacon SDK is currently in closed Beta. Please complete the form to sign up for the closed beta.\nJoin to get access to the Beacon SDK, the community sheet repo for Beacon sheet, the community sheet developers in discord, and the new sheet developer Roll20 permissions.\nWhen utilizing Macroswithin the Roll20 Tabletop or Roll20 Characters (both refered to as host throughout this page), there are instances where a legacy macro might need to be employed for a Beacon sheet.\nThis scenario commonly arises when transitioning from an existing legacy sheet to a Beacon sheet. During such transitions, it\u0026rsquo;s possible that the attributes or roll templates called from the legacy macro may not align with the structure of attributes or the lack of roll templates in the Beacon Sheet.\nconvertLegacyMacroAttributes The convertLegacyMacroAttributes method allows us to determine the mapping strategy for legacy attributes to the new Beacon Sheet.\ninitRelay({ convertLegacyMacroAttributes: (messages: { attribute: string, characterId: string, character: Character }) =\u0026gt; {}: any, }): Promise\u0026lt;Dispatch\u0026gt;\rThis method is defined during the initial SDK initialization process and is invoked by the host when it attempts to parse a macro and encounters a failure in locating an attribute\u0026rsquo;s value during an macro\u0026rsquo;s execution.\nAdvanced sheet actions typically will first search through the defined computed properties before resorting to the convertLegacyMacroAttributes method as a fallback.\nThe method\u0026rsquo;s purpose is to return a value that will be substituted in the macro. However, it grants us the autonomy to devise the preferred approach for handling legacy attribute values.\nhandleLegacyRollTemplates Since Beacon sheets no longer require or use roll templates as previously needed in older custom sheets, there will be times where a legacy macro might make include a reference to a legacy roll template. We can use the handleLegacyRollTemplates to determine how to handle these cases.\ninitRelay({ handleLegacyRollTemplates: (message: { templateName: string, // name of the template that triggered this method properties: Record\u0026lt;string, any\u0026gt;, // a list of the values and formulas for rolls and macro in the template // along with values for other properties in the template dispatch: Dispatch, playerid: string , originalInput: string // the original text input for the entire roll template string }) =\u0026gt; {}: any, }): Promise\u0026lt;Dispatch\u0026gt;\rThe properites object will also include a plainText key for roll template arguments not inside the curly brace syntax.\n{ //... other arguments properties: { attack: { value: 12, formula: \u0026#39;1d20\u0026#39; }, damage: { value: 5, formula: \u0026#39;2d6\u0026#39; }, foo: { value: \u0026#39;bar\u0026#39; }, name: { formula: \u0026#34;@{Helga|name}\u0026#34; value: \u0026#34;Helga\u0026#34; }, plainText: [\u0026#39;apicallback\u0026#39;, \u0026#39;apple=red\u0026#39;], something: { value: \u0026#34;I went to get tacos\u0026#34; }, ............ } }\r","date":"2023-09-07","id":13,"permalink":"/beacon-docs/docs/components/handling-legacy-methods/","summary":"Join the Closed Beta\nThe Beacon SDK is currently in closed Beta. Please complete the form to sign up for the closed beta.","tags":[],"title":"Handling Legacy methods"},{"content":"","date":"2024-06-07","id":14,"permalink":"/beacon-docs/docs/gettingstarted/","summary":"","tags":[],"title":"Getting Started"},{"content":"","date":"2024-04-07","id":15,"permalink":"/beacon-docs/docs/components/","summary":"","tags":[],"title":"Components"},{"content":"","date":"2024-02-07","id":16,"permalink":"/beacon-docs/docs/about/","summary":"","tags":[],"title":"About"},{"content":"\rJoin the Closed Beta\nThe Beacon SDK is currently in closed Beta. Please complete the form to sign up for the closed beta.\nJoin to get access to the Beacon SDK, the community sheet repo for Beacon sheet, the community sheet developers in discord, and the new sheet developer Roll20 permissions.\nQ: How is Beacon better than the old way of building sheets (known as Custom Sheets)?\rIt depends on your web development skill level. There are a number of benefits to the Beacon SDK if you know how to build web applications. If you don\u0026rsquo;t know how to set up your own local environment, than the Beacon SDK might now be the first place you should start. Learn more about sheet development using the custom sheet.\nIf you have the skill to take advantage of the Beacon SDK, there are a number of improvements that will make it much easier to build characters sheets.\nFirst, the Beacon SDK allows you to develop locally and preview your changes automatically in the Roll20 Tabletop and Roll20 Character sandboxes. This means that you don\u0026rsquo;t have to keep uploading your HTML and CSS into the custom sheet to see your changes.\nNext, it allows you to develop your character sheet with all the power of JavaScript frameworks and modern web development libraries. In our example sheets, we use Vue.js, but you are free to use whatever you are most comfortable with. Also, you could use something like Cypress to create automated testing. That\u0026rsquo;s what we use in our Beacon sheets.\nLastly, the Beacon SDK makes it much easier for a web developer who knows JSON and Javascript to access character data and manage attributes on the character. If you\u0026rsquo;re familiar with the custom sheet, you no longer have to deal with sheet workers to get the data you need for a character. Also, the Beacon SDK introduces nested and computed attributes that make complex data models for your character sheet easier to create and maintain.\nQ: I\u0026rsquo;m not really a web developer, should I use Beacon or the custom sheet to make a my own character sheet?\rThat is up to you and your comfort level. If you\u0026rsquo;re looking to learn more about web development, building a character sheet with the Beacon SDK is a great way to level up your skills. What you learn during this process can be taken with you into any other web development project you work on in the future.\nIf setting up your own development environment is too intimidating for you, than it might be easier for you to start with the custom sheet and to go from there.\nQ: I\u0026rsquo;m interested in using Beacon, but I don\u0026rsquo;t know the basics of setting up a local environment. Where can I go to learn more about web development?\rYou can start learning how to build a local development environment by reading or watching the following tutorials. Note: these are not tutorials that we\u0026rsquo;ve produced, but we have found them helpful in getting started with web development.\nhttps://learn.microsoft.com/en-us/windows/dev-environment/javascript/vue-on-wsl https://www.youtube.com/watch?v=WPqXP_kLzpo Q: Now that Roll20 has acquired Demiplane, will you continue to support character sheets built on Beacon?\rThe recent acquisition of Demiplane brings exciting new opportunities for character sheets and compendiums on Roll20. At the same time, we are fully committed to supporting the Beacon SDK and character sheets that are built in our new advanced sheets ecosystem on Roll20. In fact, we believe that the Beacon SDK will be a key component of our future plans for Demiplane integration. In addition, our new D\u0026amp;D 2024 sheet is built on top of the Beacon SDK, and we will continue to utilize it to build first-class experiences on Roll20.\nIn short, you can rest assured that the Beacon SDK is an important tool in our toolbox moving forward.\nQ: What are actions in the context of Beacon?\rActions are methods executed in the chat log of Roll20 Tabletop or Roll20 Characters, often used for rolls triggered from macros or chat buttons. They are defined in the sheet\u0026rsquo;s configuration and can interact with character data. Q: How are computed properties used in Roll20?\rComputed properties are attributes which are accessible by users of your character sheet. They are usable in macros to create custom rolls or common actions for each character. Computed properties can represent derived values or complex calculations based on character data. Q: What is the dispatch function used for?\rThe dispatch function provides methods for sending commands from the character sheet back to Roll20, including updating character data, performing actions, and interacting with the interface. Q: What are roll buttons, and how do they work?\rRoll buttons are HTML elements with specific attributes that execute designated sheet actions when clicked. They can pass arguments to the action method and are commonly used for triggering rolls from the character sheet. Q: How are legacy attributes handled in Beacon?\rBeacon gives you the ability to transition your legacy attributes to new attributes you create in Beacon. This means that when a user updates their sheet to the new Beacon sheet, their legacy attribute can be mapped to Beacon attributes using the convertLegacyMacroAttributes function. Sheet developers can define how to handle legacy attribute values to ensure compatibility with existing macros. Q: What is the purpose of the query function?\rThe query function displays a SweetAlert2 prompt to users and returns the results along with any errors. It is commonly used for interactive prompts or confirmations within the VTT interface. Q: How are tokens managed in the VTT?\rTokens represent characters or objects on Roll20 Tabletop (VTT). Functions like getTokens, updateTokensByCharacter, and addToTracker are used to retrieve token information, update token data, and manage tokens in the turn tracker. Q: What is the role of the convertLegacyMacroAttributesArgs type?\rThe convertLegacyMacroAttributesArgs type defines the arguments used for handling legacy macro attributes. It includes the attribute name, character ID, and character data needed for mapping legacy attributes to the new sheet structure. ","date":"2024-01-07","id":17,"permalink":"/beacon-docs/docs/about/faq/","summary":"Join the Closed Beta\nThe Beacon SDK is currently in closed Beta. Please complete the form to sign up for the closed beta.","tags":[],"title":"FAQ"},{"content":"\rJoin the Closed Beta\nThe Beacon SDK is currently in closed Beta. Please complete the form to sign up for the closed beta.\nJoin to get access to the Beacon SDK, the community sheet repo for Beacon sheet, the community sheet developers in discord, and the new sheet developer Roll20 permissions.\nBackground: The background color of the alert box.\nCharacter: An entity in the game with attributes, bio, GM notes, and a token representation.\nCharacter sheet: A digital or printed page used to track a character\u0026rsquo;s attributes, abilities, and other relevant information in a role-playing game.\nComputed Property: Properties that have both get and set methods, which can be dynamically calculated.\nConvertLegacyMacroAttributes: A function to handle mapping legacy macro attributes to the new Beacon Sheet format.\nDispatch: A set of functions enabling the sheet to send commands back to the VTT.\nGM (Game Master): The person who runs the game, controls the NPCs \u0026amp; the story, and provides challenges for the players.\nHandler: Methods that act as event handlers to process messages from the host.\nInitRelay: Function to initialize the SDK relay, setting up communication between the host and the character sheet.\nMacro: A script that automates repetitive tasks in the VTT.\nRoll Template: A predefined format for displaying the results of a dice roll.\nToken: A visual representation of a character or object on the virtual tabletop, with various properties like position, size, and attributes.\nVTT (Virtual Tabletop): An online platform that allows players to play tabletop role-playing games over the internet.\nValidationMessage: A message displayed when an input value does not meet specific criteria.\nQuantum Roll: A system that ensures the fairness and authenticity of dice rolls in the VTT by using cryptographic methods.\n","date":"2024-03-07","id":18,"permalink":"/beacon-docs/docs/about/glossary/","summary":"Join the Closed Beta\nThe Beacon SDK is currently in closed Beta. Please complete the form to sign up for the closed beta.","tags":[],"title":"Glossary"},{"content":"\rJoin the Closed Beta\nThe Beacon SDK is currently in closed Beta. Please complete the form to sign up for the closed beta.\nJoin to get access to the Beacon SDK, the community sheet repo for Beacon sheet, the community sheet developers in discord, and the new sheet developer Roll20 permissions.\nWe strive to make the Beacon SDK and its documentation a better tool for Community Sheet Developers like you! So before we get started, thank you for helping us make them the best they can be. It is no small task supporting all games with the best digital character sheets, but with your help, players around the world will can use awesome characeter sheets for their favorite games.\nReporting Bugs If you find a bug with the Beacon SDK, and you want to report it, thank you. There are several ways you can go about reporting it. Feel free to choose the easiest for you. Most importantly, we want you to let us know so we can fix them.\nYou can create an issue on the Beacon Documentation Github Repo. You can create an issue on the Beacon Community Sheets Repo. You can let us know in the Community Sheet Developers Discord Channels. Make sure to fill out a [Beta Sign up form(https://docs.google.com/forms/d/e/1FAIpQLScwIAc38NhSTYBtZH04pkDj9O7APwysdgsRnVssFNhsoONOUw/viewform?usp=sf_link)] before joining the Discord. You can submit a Roll20 Help Ticket where our support staff and make sure we get the information. When you submit a bug report, it\u0026rsquo;s most helpful for you to include steps that will reliably reproduce the bug. If you don\u0026rsquo;t have those, that\u0026rsquo;s fine too. The most important thing is to report it. We\u0026rsquo;ll work with you to figure out how we can reproduce and fix the bug.\nUltimately, our team manages our sprint work with an internal tool. No matter which method you use to report the issue, we\u0026rsquo;ll create a companion ticket in our internal tool and link it to your original report. This is why if we have questions, we can find your report, and when we\u0026rsquo;re done, we can let you know that it has been fixed.\nSuggesting Features If you have an idea of a feature that we should add to make things easier for you or others, please let us know! Here are a few ways that you can choose from to let us know.\nYou can create an issue on the Beacon Documentation Github Repo. You can create an issue on the Beacon Community Sheets Repo. You can let us know in the Community Sheet Developers Discord Channels. Make sure to fill out a [Beta Sign up form(https://docs.google.com/forms/d/e/1FAIpQLScwIAc38NhSTYBtZH04pkDj9O7APwysdgsRnVssFNhsoONOUw/viewform?usp=sf_link)] before joining the Discord. You can schedule a meeting with Andrew and/or Alice directly to talk about it and give him the opportunity to ask questions about it. Ultimately, we want to hear what is particularly painful and time consuming for you so we can work to make it easier for you to create awesome digtial character sheets for the games you love.\nCode Contributions to the Beacon SDK Documentation Our goal it to build this site into the single source of information for Community Sheet Developers. The task of documenting everything will take time and iteration. If you find something in the documention that is wrong or needs to be updated, please let us know! You are also welcome to make a pull request of the Beacon SDK Documentation Repo, update the files, and commit your changes. We\u0026rsquo;ll review and publish them on a regular basis.\nWhen you do submit a pull request, thank you for helping us make the Beacon SDK project better!\n","date":"2024-02-07","id":19,"permalink":"/beacon-docs/docs/about/how-to-contribute/","summary":"Join the Closed Beta\nThe Beacon SDK is currently in closed Beta. Please complete the form to sign up for the closed beta.","tags":[],"title":"How to Contribute"},{"content":"Release Date: 2024-07-1\nNew Features Closed Beta Released. Sign up to get access to Beacon SDK and Roll20 Sandboxes ","date":"2024-01-07","id":20,"permalink":"/beacon-docs/docs/about/changelog/","summary":"Release Date: 2024-07-1\nNew Features Closed Beta Released. Sign up to get access to Beacon SDK and Roll20 Sandboxes ","tags":[],"title":"Changelog"},{"content":"","date":"2023-09-07","id":21,"permalink":"/beacon-docs/docs/","summary":"","tags":[],"title":"Docs"},{"content":"","date":"2023-09-07","id":22,"permalink":"/beacon-docs/privacy/","summary":"","tags":[],"title":"Privacy Policy"},{"content":"","date":"2023-09-07","id":23,"permalink":"/beacon-docs/","summary":"","tags":[],"title":"The Beacon SDK by Roll20"},{"content":"","date":"0001-01-01","id":24,"permalink":"/beacon-docs/categories/","summary":"","tags":[],"title":"Categories"},{"content":"","date":"0001-01-01","id":25,"permalink":"/beacon-docs/contributors/","summary":"","tags":[],"title":"Contributors"},{"content":"","date":"0001-01-01","id":26,"permalink":"/beacon-docs/tags/","summary":"","tags":[],"title":"Tags"}]