import{_ as e,c as t,o as a,a3 as i}from"./chunks/framework.D5qxx6u8.js";const m=JSON.parse('{"title":"Handling Legacy Macro Attributes","description":"","frontmatter":{},"headers":[],"relativePath":"components/macros.md","filePath":"components/macros.md","lastUpdated":1717792017000}'),s={name:"components/macros.md"},r=i('<h1 id="handling-legacy-macro-attributes" tabindex="-1">Handling Legacy Macro Attributes <a class="header-anchor" href="#handling-legacy-macro-attributes" aria-label="Permalink to &quot;Handling Legacy Macro Attributes&quot;">​</a></h1><p>When utilizing Macros within the VTT, there are instances where a legacy macro might need to be employed for a Beacon sheet.</p><p>This scenario commonly arises when transitioning from an existing legacy sheet to a Beacon sheet. During such transitions, it&#39;s possible that the attributes called from the legacy macro may not align with the structure of attributes in the Beacon Sheet.</p><p>The <code>convertLegacyMacroAttributes</code> function serves as a pivotal tool, empowering Sheet Developers to determine the mapping strategy for legacy attributes to the new Beacon Sheet.</p><h2 id="convertlegacymacroattributes" tabindex="-1"><code>convertLegacyMacroAttributes</code> <a class="header-anchor" href="#convertlegacymacroattributes" aria-label="Permalink to &quot;`convertLegacyMacroAttributes`&quot;">​</a></h2><p>This function is defined during the initial SDK initialization process and is invoked by the host when it encounters a failure in locating an attribute&#39;s value.</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">convertLegacyMacroAttributes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">messages</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> convertLegacyMacroAttributesArgs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {}: any</span></span></code></pre></div><p>Advanced sheet macros typically first search through the defined computed properties before resorting to the <code>convertLegacyMacroAttributes</code> function.</p><p>The function&#39;s purpose is to return a value that will be substituted in the macro. However, it grants Sheet Developers the autonomy to devise their preferred approach for handling legacy attribute values.</p>',9),n=[r];function o(c,h,l,p,d,g){return a(),t("div",null,n)}const y=e(s,[["render",o]]);export{m as __pageData,y as default};
